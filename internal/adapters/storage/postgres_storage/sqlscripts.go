// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sql/create_layer.sql
// sql/insert_user.sql
// sql/select_all_model_elements.sql
// sql/select_all_models.sql
// sql/select_all_properties.sql
// sql/select_contexts_by_id.sql
// sql/select_contexts_id_by_unit.sql
// sql/select_layer_names.sql
// sql/select_linked_units.sql
// sql/select_properties_by_unit.sql
// sql/select_properties_id_by_unit.sql
// sql/select_role.sql
// sql/select_unlinked_units_by_lang.sql
// sql/select_user_password.sql

package postgres_storage


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSqlCreatelayerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x98\xc1\x8e\x22\x37\x13\xc7\xef\x3c\x45\x1d\xbe\x03\x48\x1f\x91\x72\xe6\x61\x90\xb7\xbb\x66\x62\xa5\x71\x13\xdb\xad\x0c\xb7\x81\xd5\x26\x07\x12\x8d\x22\x25\xb7\x48\x51\x72\x8f\x44\x36\x43\x76\x02\x0b\xfb\x0a\xe5\x37\x8a\xec\xee\x66\x18\x70\x37\xc5\x2e\x93\x5d\xe5\x34\x08\xd7\xbf\xe6\xef\x5f\x55\xb9\x4d\xf7\xfb\x40\xbf\xd0\xd2\xdd\xd2\x92\xde\xd2\x92\x36\xb4\x71\x73\x5a\x82\x9b\xd1\x82\xfe\xa0\x35\x3d\xb8\x6f\xdc\x1c\xe8\x07\xfa\x11\xba\xf4\x8e\xb6\x74\x0f\xb4\xa2\x05\xfd\x45\xf7\x6e\x4e\x7f\x83\x9b\xd2\x9a\xb6\xe5\x87\xd7\xb4\x75\x77\xe0\xa6\xee\x55\xc8\xb6\xe8\x75\x52\x9d\x8f\xc1\x24\x5f\xe0\x48\x80\xbc\x02\xbc\x91\xc6\x1a\xf8\xdf\xe7\xc3\x4c\x4c\x50\x43\x22\x4c\x22\x52\x1c\x74\x12\x8d\xc2\xe2\x5e\xa4\xca\xed\x61\xf4\xa0\xd3\xe9\xf7\xa1\x4b\xbf\xba\x99\xbb\x75\x2f\x69\xe5\x66\xee\xa5\xbb\x2d\x0d\xf7\x80\x7e\xf6\xe6\x68\xe9\x3d\x57\xae\xdc\x5d\x9d\xd8\x8a\x17\x19\x36\xe4\xfd\x6c\x94\xa7\x98\x99\x6e\x07\x00\x40\xa6\x20\x95\x85\x6b\x54\xa8\x85\xc5\x14\x44\xf6\xb5\x98\x18\x10\x06\x64\x8a\xca\x4a\x3b\x81\xb1\x96\x23\xa1\x27\xf0\x25\x4e\xfe\x1f\x44\x4a\x8c\x10\x2c\xde\x58\x28\x94\xfc\xaa\xc0\xf0\x5f\x54\x91\x65\x9d\x5e\x69\x9a\x7e\xa7\x75\x0d\xd8\xcd\xdc\x7c\xe7\x0f\xba\x6e\x4a\xef\xdc\x2d\x2d\x02\xbc\x6f\x69\x43\x0b\x8f\x70\x8f\xbe\xc7\xd8\xef\x43\x20\xb9\xdb\xc6\xe1\x16\x30\xc3\x11\x2a\x6b\x06\xac\x0d\xd7\xd1\xcf\xba\xe5\x9f\xe8\x9e\x1e\x68\x53\x35\x90\xaf\x98\x9b\xba\x29\xad\x68\x4b\x7f\xd2\x16\xdc\x1d\xbd\x71\x73\xdf\x4a\x2c\xcb\x85\x92\xd6\x0c\x75\xf1\x01\x96\x43\x99\x87\xa5\xb4\xfc\xe6\x2a\xd7\x28\xaf\x95\x0f\x81\x6e\xbd\xdc\x03\x8d\x57\xa8\x51\x25\x78\xdc\x23\x32\xed\x95\x52\x8d\xd7\xd2\x58\x2d\xac\xcc\xd5\x30\x0d\xf6\xe5\x08\x8d\x15\xa3\xf1\x0e\x45\x19\x19\x20\x9d\x41\x2a\x7c\xdc\xba\xa9\xef\x72\x5a\xf8\x81\xfc\x10\x62\xa8\xfe\x8b\xc4\x7e\xdb\x1f\x8f\xbe\x3f\x79\x3c\x1c\x8f\x06\xba\xf4\x36\x72\x0e\x80\xff\xfc\x7d\xc3\x10\x32\xe6\xab\xdc\xcc\x50\xa8\x74\xe8\x87\x87\x37\x66\x07\xa2\x6a\xdc\x2e\x0a\xd5\xe7\x6d\xce\x55\xad\xc6\x53\xed\x0e\x01\x99\xf6\x78\x60\x97\xdc\x89\xf6\xb4\x0f\xa2\x19\x5d\xcd\x28\x43\x7d\x0a\x94\x4c\x15\xaf\x0c\x07\xa2\xb2\x0a\xfe\x4b\xff\x5d\x23\xbb\xc7\x80\x38\xbe\xdd\x81\xb4\xab\x45\x50\xa0\x3a\x91\x32\x04\xb4\xa5\x44\xc5\xae\x88\x7b\x45\x8b\x80\x73\xe5\x66\xe1\x19\xfe\xe0\x01\xd3\x03\xad\x7c\x01\x8e\x6a\xd0\x52\x31\x06\xfb\xb1\xce\xc7\xa8\xad\xc4\xb2\xa3\xeb\xfd\xf3\x6a\xd0\x20\x2e\x6b\x51\x2d\x4e\x9a\xc9\xed\x45\x3c\x41\x37\x2e\x5e\x64\x32\xd9\xcb\x7e\x50\x8d\xf6\x52\x70\x4a\xfb\x1c\x75\xb8\xcc\x2c\x44\x91\x72\x67\xa2\x41\xfc\x29\xd7\xe3\x8c\xb9\x08\x0d\xbe\xf1\xb5\xa0\x55\xc0\x3c\xbf\xf8\x34\x24\xb9\xf2\x4f\xa8\xf7\x99\x85\xa8\xb4\x24\x5f\x2d\x35\x73\x7a\x0c\x88\x71\xaf\x33\x7f\x9c\x29\x60\x51\xbf\x4c\xef\x47\x10\x72\x3b\x3f\x2a\xad\xe8\xdb\x9b\x16\xf2\x61\xf1\x5f\xa2\x7e\x4e\xaf\xfb\xdf\x64\x6b\xf7\x1d\xbd\xa1\x2d\xbd\xa6\x45\xe0\xbf\x7e\x86\xf3\xbf\x30\xa8\xdf\xa7\xdd\x8f\x75\xd5\x13\xd8\xa0\x6e\x81\x54\xae\xc6\x78\x87\x84\x1f\xa9\xc5\xf9\xb0\x2f\x74\xe1\x39\x80\xc7\xbe\xf3\x1c\xe9\x3e\x31\xe8\x7b\x1d\x7e\xad\x85\xb2\x60\x30\xc3\xc4\x42\xae\x8e\xcb\x03\x36\x07\x63\x0b\xff\x33\x65\x50\x45\x4b\x65\x50\xb3\xa3\x8b\x71\xf8\xbd\x71\x32\xfa\x94\x15\x54\xe7\x58\x89\x46\x37\x5a\x39\x88\x3e\x4d\xa5\xba\xce\x9e\x07\xa7\x59\xd4\xc2\x28\x26\x6a\xf6\xd7\x70\xd5\xe3\xf9\xe4\x8b\x23\x7e\x39\xe2\x33\x7d\x73\xf9\xf2\xc5\x5c\xdf\x6c\xde\xd1\xeb\x04\xcf\x35\x57\x1a\xf1\x7c\x5a\x7a\x96\x63\x2e\x67\xae\x94\xe7\x98\x3f\x73\x47\xcf\x30\xe6\xd8\x71\x74\xb1\xc9\x6b\xd7\xf1\x8d\xb2\xcf\x07\x8e\x8e\x61\x94\x4d\xb4\x7c\x91\xc1\x0c\xae\x5f\x55\x9c\x95\xfb\xf1\xbd\x4b\x4c\x16\x61\xf0\x68\x09\xd3\x22\x11\x36\xd7\x2d\x1b\x8f\x05\x37\xa7\xde\xdf\x00\x23\x79\x3c\xfc\x94\xf3\xa7\x1b\x66\xef\xa1\x49\xd6\xa9\xff\xa1\xc8\x32\x2f\xab\xde\xcd\xef\xde\xdd\xdb\x1c\x44\x3a\x92\x6a\xf0\x34\xcc\xff\x09\x57\x13\x03\xb2\x4d\xf4\x4f\x00\x00\x00\xff\xff\x34\xf6\x85\xf1\x79\x18\x00\x00")

func bindataSqlCreatelayerSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlCreatelayerSql,
		"sql/create_layer.sql",
	)
}



func bindataSqlCreatelayerSql() (*asset, error) {
	bytes, err := bindataSqlCreatelayerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/create_layer.sql",
		size: 6265,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1679503302, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlInsertuserSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x6a\xc3\x40\x0c\x45\xf7\x73\x8a\xbf\x30\xd8\x86\x49\xc1\xcd\x2e\x3e\x4c\x99\xc6\xc2\x15\x8c\x25\x23\x69\x62\x7a\xfb\x12\x07\x4a\x36\x6f\xf3\x78\xfc\xcf\xe2\x64\x01\x96\x50\xec\xed\xbb\xf2\xfd\xa3\x39\x99\x0f\xbc\x64\x48\xd9\x28\x63\x2f\xee\x87\xda\x92\x61\x5a\x29\xc3\x68\x65\x0f\x2b\xc1\x2a\x5f\x4b\x09\x1a\xa1\x0f\x32\xe3\x85\x65\xc5\xb3\xc6\xa3\xd4\x46\xb8\x5c\xa0\xf6\xee\xfc\xd7\x83\xb6\x97\x4d\x27\x1d\x83\xb4\x5a\x33\xfa\x6e\xea\x9f\xfc\x3c\x79\xed\x33\x44\x8f\x61\xbc\xdd\x82\x37\xf2\x28\xdb\x3e\xce\x29\xdd\x8d\x4a\xd0\x6b\xa3\x9b\x70\x70\xfc\xfc\xdf\x3b\xe3\x39\xad\x56\x24\xd0\x5d\x11\x8a\x6e\x9a\xd3\x5f\x00\x00\x00\xff\xff\x93\x6f\x69\x98\xe1\x00\x00\x00")

func bindataSqlInsertuserSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlInsertuserSql,
		"sql/insert_user.sql",
	)
}



func bindataSqlInsertuserSql() (*asset, error) {
	bytes, err := bindataSqlInsertuserSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/insert_user.sql",
		size: 225,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677593170, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallmodelelementsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x4b\xcd\x49\xcd\x4d\xcd\x2b\x29\xb6\x06\x04\x00\x00\xff\xff\xcc\x0a\xd8\x06\x20\x00\x00\x00")

func bindataSqlSelectallmodelelementsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallmodelelementsSql,
		"sql/select_all_model_elements.sql",
	)
}



func bindataSqlSelectallmodelelementsSql() (*asset, error) {
	bytes, err := bindataSqlSelectallmodelelementsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_model_elements.sql",
		size: 32,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677232788, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallmodelsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\xcb\xcd\x4f\x49\xcd\x29\xb6\x06\x04\x00\x00\xff\xff\x8f\xcd\x47\xea\x1e\x00\x00\x00")

func bindataSqlSelectallmodelsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallmodelsSql,
		"sql/select_all_models.sql",
	)
}



func bindataSqlSelectallmodelsSql() (*asset, error) {
	bytes, err := bindataSqlSelectallmodelsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_models.sql",
		size: 30,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677232788, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallpropertiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x28\xca\x2f\x48\x2d\x2a\xc9\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x6a\x00\xd0\x6c\x21\x00\x00\x00")

func bindataSqlSelectallpropertiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallpropertiesSql,
		"sql/select_all_properties.sql",
	)
}



func bindataSqlSelectallpropertiesSql() (*asset, error) {
	bytes, err := bindataSqlSelectallpropertiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_properties.sql",
		size: 33,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677233396, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectcontextsbyidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xc8\x4c\xd1\x51\x28\x49\xad\x28\xe1\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\xce\xcf\x03\x89\x15\x73\x95\x67\xa4\x16\xa5\x2a\x64\xa6\x28\xd8\x2a\x24\xe6\x55\x6a\xa8\x18\x6a\x5a\x03\x02\x00\x00\xff\xff\x0e\x85\x7d\xa7\x38\x00\x00\x00")

func bindataSqlSelectcontextsbyidSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectcontextsbyidSql,
		"sql/select_contexts_by_id.sql",
	)
}



func bindataSqlSelectcontextsbyidSql() (*asset, error) {
	bytes, err := bindataSqlSelectcontextsbyidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_contexts_by_id.sql",
		size: 56,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677404641, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectcontextsidbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x48\xce\xcf\x2b\x49\xad\x28\x89\xcf\x4c\xe1\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x83\x4a\x14\xc7\x27\xe6\xa5\xc4\x97\xe6\x65\x96\x14\xc7\xab\x18\x71\x95\x67\xa4\x16\xa5\x2a\x80\xb8\xf1\x99\x29\x0a\xb6\x0a\x2a\xc6\xd6\x5c\x80\x00\x00\x00\xff\xff\x52\x59\xf6\xff\x4a\x00\x00\x00")

func bindataSqlSelectcontextsidbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectcontextsidbyunitSql,
		"sql/select_contexts_id_by_unit.sql",
	)
}



func bindataSqlSelectcontextsidbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectcontextsidbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_contexts_id_by_unit.sql",
		size: 74,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677401760, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectlayernamesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x4e\xce\x48\xcd\x4d\x8c\xcf\x4b\xcc\x4d\xe5\x4a\x2b\xca\xcf\x55\xc8\xcc\x4b\xcb\x2f\xca\x4d\x2c\xc9\xcc\xcf\x8b\x87\x48\xea\x41\xa8\x92\x44\xae\xf2\x8c\xd4\xa2\x54\x64\x2d\x0a\x39\x99\xd9\xa9\x0a\xea\xaa\xf1\x39\x89\x95\xa9\x45\xea\xd6\x5c\x80\x00\x00\x00\xff\xff\xde\x9c\x3c\xbe\x56\x00\x00\x00")

func bindataSqlSelectlayernamesSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectlayernamesSql,
		"sql/select_layer_names.sql",
	)
}



func bindataSqlSelectlayernamesSql() (*asset, error) {
	bytes, err := bindataSqlSelectlayernamesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_layer_names.sql",
		size: 86,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1676325398, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectlinkedunitsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8a\xc3\x30\x10\x43\xef\xf9\x0a\x1f\xf6\xb8\x04\xf6\xbc\xe4\x5b\x06\x53\xab\xc5\x25\x91\x61\x3c\x81\xf6\xef\x4b\x12\x0a\x0e\x4e\x9d\xfa\x36\x1e\x49\xf8\xc9\x19\x23\x2e\xe6\x7e\xfe\x64\xf4\x4f\x68\x3f\x33\x5a\x16\x9d\xfb\x18\x9c\xcf\x6e\x19\x45\x67\x89\xe1\xb7\x73\xdb\xa9\xa5\x53\x0a\x18\x65\x6f\x78\xdf\x35\x6c\x8a\x5b\xcc\xa6\xde\x62\xa2\x04\x6f\x28\xfd\xd5\xb2\x11\x64\x78\x58\xe9\x5d\xe6\x4f\x72\xb0\x24\x03\x1b\x4f\x04\x6b\x32\xf0\x94\x0c\x6c\x90\x81\xdf\x93\x81\x7b\x32\x70\x25\xeb\xae\x9a\xa6\x83\x1a\xd6\x94\x48\x42\xdd\x3d\x45\xd6\x02\xf1\x0c\x02\xba\x74\xb0\x5b\x4a\x19\x8a\xdf\x3e\x09\x3b\x4c\xd9\xaa\x1d\x8a\x66\xff\xbb\x57\x00\x00\x00\xff\xff\x6e\xb7\xe0\xb9\x5f\x02\x00\x00")

func bindataSqlSelectlinkedunitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectlinkedunitsSql,
		"sql/select_linked_units.sql",
	)
}



func bindataSqlSelectlinkedunitsSql() (*asset, error) {
	bytes, err := bindataSqlSelectlinkedunitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_linked_units.sql",
		size: 607,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677397991, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectpropertiesbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xc1\x6e\x83\x30\x10\x44\xef\xfe\x8a\x39\x70\x28\x95\xa8\x44\x7b\xac\xf8\x16\xcb\xd8\x1b\xb1\x92\x31\xc4\x5e\x2b\xe1\xef\x23\x02\x8a\x20\x44\xc9\x5c\x67\xe7\xbd\x4d\xe4\xc9\x0a\xbe\xd5\x29\x0e\x3d\xc6\xdc\x7a\xb6\x3f\x63\x1c\x46\x8a\xc2\x94\xd4\xa5\xa3\x48\x60\x07\x0e\xf8\x5a\x8f\xd7\x7a\xd2\xec\x14\xb6\xb9\x33\x8a\x5a\x7b\x33\x51\xdc\x50\xb4\x09\x4e\xe7\xc0\x92\x74\xf1\xbb\x9f\x2c\xfc\xb9\xd3\xec\xd0\x3c\x1c\xcf\xe8\x43\xf6\xae\xd7\xf0\x43\x16\x9b\xd0\x55\xd0\xa0\xf8\xfb\x70\xed\xb9\x67\x41\x8d\xaa\x42\x4b\xd6\xe4\xb4\x4e\x3b\x93\xe6\x8f\xcf\x99\x60\x87\x90\x24\x1a\x0e\xf2\x9e\x55\xee\xea\xf2\x5f\xdd\x02\x00\x00\xff\xff\x0b\x0d\x65\x70\x78\x01\x00\x00")

func bindataSqlSelectpropertiesbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectpropertiesbyunitSql,
		"sql/select_properties_by_unit.sql",
	)
}



func bindataSqlSelectpropertiesbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectpropertiesbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_properties_by_unit.sql",
		size: 376,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677234694, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectpropertiesidbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x28\xca\x2f\x48\x2d\x2a\xa9\x8c\xcf\x4c\xe1\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x83\xca\x64\xa6\x16\xc7\x27\xe6\xa5\xc4\x97\xe6\x65\x96\x14\xc7\xab\x18\x71\x95\x67\xa4\x16\xa5\x2a\x80\xb8\xf1\x99\x29\x0a\xb6\x0a\x2a\xc6\xd6\x5c\x80\x00\x00\x00\xff\xff\x29\x2c\x66\xa2\x4d\x00\x00\x00")

func bindataSqlSelectpropertiesidbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectpropertiesidbyunitSql,
		"sql/select_properties_id_by_unit.sql",
	)
}



func bindataSqlSelectpropertiesidbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectpropertiesidbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_properties_id_by_unit.sql",
		size: 77,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677401658, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectroleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x2d\x4e\x2d\x2a\xd6\x2b\xca\xcf\x49\xe5\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x03\x0b\x73\x95\x67\xa4\x16\xa5\x42\x95\xe4\x25\xe6\xa6\x2a\xd8\x2a\x68\x40\xf5\x15\xa7\x16\x17\x67\xe6\xe7\xc5\x83\x24\x35\xad\xb9\x00\x01\x00\x00\xff\xff\x53\x14\x8a\xa3\x4e\x00\x00\x00")

func bindataSqlSelectroleSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectroleSql,
		"sql/select_role.sql",
	)
}



func bindataSqlSelectroleSql() (*asset, error) {
	bytes, err := bindataSqlSelectroleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_role.sql",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677146985, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectunlinkedunitsbylangSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x2b\xcd\xcb\x2c\x29\x8e\x57\x31\xe2\x2a\xcf\x48\x2d\x4a\x55\xc8\x4c\x51\xc8\xcb\x2f\x51\xc8\xcc\x53\xd0\x80\xea\x00\x29\x88\x57\x31\x8a\xcf\x4c\xe1\x52\x40\x07\x60\xb3\xd0\x8c\x2a\x2a\x8d\x4f\xcc\x4b\x89\x4f\xcd\xc3\x50\xae\x69\xcd\x05\x08\x00\x00\xff\xff\xc0\x08\xc2\x45\x86\x00\x00\x00")

func bindataSqlSelectunlinkedunitsbylangSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectunlinkedunitsbylangSql,
		"sql/select_unlinked_units_by_lang.sql",
	)
}



func bindataSqlSelectunlinkedunitsbylangSql() (*asset, error) {
	bytes, err := bindataSqlSelectunlinkedunitsbylangSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_unlinked_units_by_lang.sql",
		size: 134,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677249617, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectuserpasswordSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x48\x2c\x2e\x2e\xcf\x2f\x4a\xe1\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x2d\x4e\x2d\x2a\xe6\x2a\xcf\x48\x2d\x4a\x55\xc8\x4b\xcc\x4d\x55\xb0\x55\x50\x31\xe4\xca\xc9\xcc\xcd\x2c\x51\x30\xb4\x06\x04\x00\x00\xff\xff\x6c\x44\x09\x8b\x3a\x00\x00\x00")

func bindataSqlSelectuserpasswordSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectuserpasswordSql,
		"sql/select_user_password.sql",
	)
}



func bindataSqlSelectuserpasswordSql() (*asset, error) {
	bytes, err := bindataSqlSelectuserpasswordSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_user_password.sql",
		size: 58,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677410171, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"sql/create_layer.sql":                  bindataSqlCreatelayerSql,
	"sql/insert_user.sql":                   bindataSqlInsertuserSql,
	"sql/select_all_model_elements.sql":     bindataSqlSelectallmodelelementsSql,
	"sql/select_all_models.sql":             bindataSqlSelectallmodelsSql,
	"sql/select_all_properties.sql":         bindataSqlSelectallpropertiesSql,
	"sql/select_contexts_by_id.sql":         bindataSqlSelectcontextsbyidSql,
	"sql/select_contexts_id_by_unit.sql":    bindataSqlSelectcontextsidbyunitSql,
	"sql/select_layer_names.sql":            bindataSqlSelectlayernamesSql,
	"sql/select_linked_units.sql":           bindataSqlSelectlinkedunitsSql,
	"sql/select_properties_by_unit.sql":     bindataSqlSelectpropertiesbyunitSql,
	"sql/select_properties_id_by_unit.sql":  bindataSqlSelectpropertiesidbyunitSql,
	"sql/select_role.sql":                   bindataSqlSelectroleSql,
	"sql/select_unlinked_units_by_lang.sql": bindataSqlSelectunlinkedunitsbylangSql,
	"sql/select_user_password.sql":          bindataSqlSelectuserpasswordSql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"sql": {Func: nil, Children: map[string]*bintree{
		"create_layer.sql": {Func: bindataSqlCreatelayerSql, Children: map[string]*bintree{}},
		"insert_user.sql": {Func: bindataSqlInsertuserSql, Children: map[string]*bintree{}},
		"select_all_model_elements.sql": {Func: bindataSqlSelectallmodelelementsSql, Children: map[string]*bintree{}},
		"select_all_models.sql": {Func: bindataSqlSelectallmodelsSql, Children: map[string]*bintree{}},
		"select_all_properties.sql": {Func: bindataSqlSelectallpropertiesSql, Children: map[string]*bintree{}},
		"select_contexts_by_id.sql": {Func: bindataSqlSelectcontextsbyidSql, Children: map[string]*bintree{}},
		"select_contexts_id_by_unit.sql": {Func: bindataSqlSelectcontextsidbyunitSql, Children: map[string]*bintree{}},
		"select_layer_names.sql": {Func: bindataSqlSelectlayernamesSql, Children: map[string]*bintree{}},
		"select_linked_units.sql": {Func: bindataSqlSelectlinkedunitsSql, Children: map[string]*bintree{}},
		"select_properties_by_unit.sql": {Func: bindataSqlSelectpropertiesbyunitSql, Children: map[string]*bintree{}},
		"select_properties_id_by_unit.sql": {Func: bindataSqlSelectpropertiesidbyunitSql, Children: map[string]*bintree{}},
		"select_role.sql": {Func: bindataSqlSelectroleSql, Children: map[string]*bintree{}},
		"select_unlinked_units_by_lang.sql": {Func: bindataSqlSelectunlinkedunitsbylangSql, Children: map[string]*bintree{}},
		"select_user_password.sql": {Func: bindataSqlSelectuserpasswordSql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
