// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sql/create_layer.sql
// sql/insert_user.sql
// sql/select_all_model_elements.sql
// sql/select_all_models.sql
// sql/select_all_properties.sql
// sql/select_contexts_by_id.sql
// sql/select_contexts_id_by_unit.sql
// sql/select_layer_names.sql
// sql/select_linked_units.sql
// sql/select_properties_by_unit.sql
// sql/select_properties_id_by_unit.sql
// sql/select_role.sql
// sql/select_unlinked_units_by_lang.sql
// sql/select_user_password.sql

package postgres_storage


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSqlCreatelayerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\xcf\x6e\x22\xc7\x13\xc7\xef\x3c\x45\x1d\x7e\x07\x90\x7e\x44\xca\x99\x87\x41\xbd\x4c\xd9\x69\x65\xe8\x21\x3d\x3d\x8a\xb9\x19\x56\x9b\x1c\x48\x64\x45\x4a\x6e\x91\xa2\xe4\x1e\x89\x6c\x4c\xd6\x81\x05\xbf\x42\xf5\x1b\x45\xdd\x33\xb0\xfc\xe9\x61\x6a\xf0\x38\xb6\x72\x5a\xb4\x5d\xdf\xf2\xb7\x3f\x5d\x55\xd3\x03\xdd\x2e\xd0\x2f\xb4\xb0\xb7\xb4\xa0\x8f\xb4\xa0\x35\xad\xed\x8c\x16\x60\xa7\x34\xa7\x3f\x68\x45\x0f\xf6\x1b\x3b\x03\xfa\x81\x7e\x84\x36\x3d\xd2\x86\xee\x81\x96\x34\xa7\xbf\xe8\xde\xce\xe8\x6f\xb0\x13\x5a\xd1\x26\xff\xf0\x9e\x36\xf6\x0e\xec\xc4\xbe\xf3\xd9\xe6\x9d\x56\xa4\x93\x11\xa4\x83\x2f\x70\x28\x40\x5e\x01\xde\xc8\xd4\xa4\xf0\xbf\xcf\xfb\xb1\x18\xa3\x86\x81\x48\x07\x22\xc2\x5e\x6b\xa0\x51\x18\xdc\x8b\x54\x89\x39\x8e\xee\xb5\x5a\xdd\x2e\xb4\xe9\x57\x3b\xb5\xb7\xf6\x2d\x2d\xed\xd4\xbe\xb5\xb7\xb9\xe1\x0e\xd0\xcf\xce\x1c\x2d\x9c\xe7\xc2\x95\xbd\xdb\x26\x36\xe2\x4d\x8c\x25\x79\x3f\x1b\x26\x11\xc6\x69\xbb\x05\x00\x20\x23\x90\xca\xc0\x35\x2a\xd4\xc2\x60\x04\x22\xfe\x5a\x8c\x53\x10\x29\xc8\x08\x95\x91\x66\x0c\x23\x2d\x87\x42\x8f\xe1\x4b\x1c\xff\xdf\x8b\x94\x18\x22\x18\xbc\x31\x90\x29\xf9\x55\x86\xfe\xaf\xa8\x2c\x8e\x5b\x9d\xdc\x34\xfd\x4e\xab\x2d\x60\x3b\xb5\xb3\x9d\x3f\x68\xdb\x09\x3d\xda\x5b\x9a\x7b\x78\xdf\xd2\x9a\xe6\x0e\xe1\x1e\x7d\x87\xb1\xdb\x05\x4f\x72\xb7\x8d\xe3\x2d\x60\x8c\x43\x54\x26\xed\xb1\x36\xbc\x8d\x7e\xd6\x2d\xff\x44\xf7\xf4\x40\xeb\xa2\x80\xdc\x89\xd9\x89\x9d\xd0\x92\x36\xf4\x27\x6d\xc0\xde\xd1\x07\x3b\x73\xa5\xc4\xb2\x9c\x29\x69\xd2\xbe\xce\x9e\x60\xd9\x1f\x73\x3f\x97\xe6\xff\x73\x95\x68\x94\xd7\xca\x85\x40\x7b\xbb\xdc\x01\x8d\x57\xa8\x51\x0d\xf0\xb4\x46\x64\xd4\xc9\xa5\x1a\xaf\x65\x6a\xb4\x30\x32\x51\xfd\xc8\xdb\x97\x43\x4c\x8d\x18\x8e\x76\x28\xf2\x48\x0f\xa9\x06\x29\xff\x71\x63\x27\xae\xca\x69\xee\x1a\xf2\x29\xc4\x50\xfd\x17\x89\xfd\xb6\xdf\x1e\x5d\x37\x79\x1c\x1c\x87\x06\xda\xf4\x31\x30\x07\xc0\x7d\xfe\xbe\xa4\x09\x19\xfd\x95\x6f\xa6\x2f\x54\xd4\x77\xcd\xc3\x6b\xb3\x23\x51\xd1\x6e\x8d\x42\x75\x79\xcb\x73\x15\xab\xe1\x54\xbb\x21\x20\xa3\xce\xd3\xc0\xd2\x82\xdb\xea\xf5\x48\x6f\x7b\xbe\x36\xed\xc3\x61\xd1\x28\x70\x97\xba\x3c\x57\xb1\x1a\x4e\xb5\x73\xd5\x34\x70\xc6\xc4\xb8\x04\x3c\xaa\x0b\xc1\x6f\x67\xce\xeb\x02\x8f\x8a\x0f\x9e\x5d\xd0\xcf\x76\x1a\xdb\x62\xc9\xa7\x07\xf3\x24\x8e\x44\xed\x4f\xe0\x74\x56\xc1\xce\x07\x54\xd7\xed\xde\x59\xa0\xaa\x48\xe9\x03\x1a\x3a\x11\xfb\x8e\xe6\x1e\xe7\xd2\x4e\xfd\x6d\xf5\xc1\x01\xa6\x07\x5a\xba\x03\x68\x78\x04\x8d\x74\x32\x42\x6d\x24\x5e\x32\x86\x4a\xc4\xf9\x59\x14\x8b\xe3\x72\x72\x7b\x11\x07\xe8\x46\xd9\x9b\x58\x0e\xf6\xb2\xbf\xcc\x48\xaa\x79\x0e\xcd\xf4\x42\x10\x29\xb7\x27\x4a\xc4\xaf\xf9\x3c\xea\x4c\x2a\x57\xe0\x6b\x77\x16\xb4\xf4\x98\x67\x8d\x77\xc3\x20\x51\xee\x2e\x76\x49\x2f\x04\xa5\x39\xf9\x62\xa9\x9c\xd3\xa7\x80\x10\xf7\x6d\xe6\x17\x7a\x30\x73\xa8\x37\x53\xfb\x01\x84\xdc\xca\x0f\x4a\x0b\xfa\xe6\xe6\x0c\x79\xbf\xf8\x2f\x51\xaf\x53\xeb\x8f\xb4\xa1\x95\xfd\x8e\x3e\xd0\x86\xde\xd3\xdc\xf3\x5f\x3d\xc3\xfc\xcf\x52\xd4\x97\x94\xfb\xa9\xae\x78\x02\xa7\xa8\xcf\x40\xca\x57\x43\xbc\x7d\xc2\x17\x2a\x71\x3e\xec\x86\x2e\x3c\x47\xf0\xd8\x77\x9e\x13\xdd\x2b\x83\xbe\x57\xe1\xd7\x5a\x28\x03\x29\xc6\x38\x30\x90\xa8\xd3\xe3\x01\x93\x40\x6a\x32\xf7\x42\xde\x2b\xa2\xa5\x4a\x51\xb3\xa3\xb3\x91\x7f\xb3\xae\x8c\xae\xb2\x82\xaa\x8e\x95\x60\x74\xa9\x95\xa3\xe8\x72\x2b\x81\x37\x3a\x9e\x2b\x9e\x30\x60\xb0\x4a\x58\xc3\x2b\x97\x20\x4f\xc8\xf1\xca\xe6\x7a\xf4\x9a\x50\xaf\xe8\xca\x45\x67\x6a\x2f\x24\x2a\xf7\x57\x72\x85\xe6\xf9\xe4\x8b\x03\x7e\x39\xe2\x9a\xbe\xb9\x7c\xf9\x62\xae\x6f\x36\xef\xe0\x35\x8d\xe7\x9a\x2b\x0d\x78\xae\x96\xd6\x72\xcc\xe5\xcc\x95\xf2\x1c\xf3\x7b\xee\xe4\x6e\xc0\x6c\x3b\x8e\x2e\xd4\x79\xe7\x75\x7c\xa3\xec\xf9\xc0\xd1\x31\x8c\xd6\x7c\x3a\x30\x83\xb7\x5f\x76\xd6\x9f\xe6\xfe\x9b\xdb\x43\x59\xab\x6a\x9a\xbb\x70\x8c\xb2\x81\x30\x89\xae\x9c\xe0\x87\xc1\xe5\xa9\xf7\xb7\xc0\x48\x1e\x0e\x67\x3d\x87\x76\x5b\x66\xef\xa1\x4c\xb6\x43\x25\xe2\xd8\xc9\x8a\xdf\xf7\x76\xbf\xff\x99\x04\x44\x34\x94\xaa\x77\x18\xe6\xfe\xf1\x97\xbe\x14\xe4\x39\xd1\x3f\x01\x00\x00\xff\xff\xeb\x2f\x76\x54\xbd\x1c\x00\x00")

func bindataSqlCreatelayerSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlCreatelayerSql,
		"sql/create_layer.sql",
	)
}



func bindataSqlCreatelayerSql() (*asset, error) {
	bytes, err := bindataSqlCreatelayerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/create_layer.sql",
		size: 7357,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677598500, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlInsertuserSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x6a\xc3\x40\x0c\x45\xf7\x73\x8a\xbf\x30\xd8\x86\x49\xc1\xcd\x2e\x3e\x4c\x99\xc6\xc2\x15\x8c\x25\x23\x69\x62\x7a\xfb\x12\x07\x4a\x36\x6f\xf3\x78\xfc\xcf\xe2\x64\x01\x96\x50\xec\xed\xbb\xf2\xfd\xa3\x39\x99\x0f\xbc\x64\x48\xd9\x28\x63\x2f\xee\x87\xda\x92\x61\x5a\x29\xc3\x68\x65\x0f\x2b\xc1\x2a\x5f\x4b\x09\x1a\xa1\x0f\x32\xe3\x85\x65\xc5\xb3\xc6\xa3\xd4\x46\xb8\x5c\xa0\xf6\xee\xfc\xd7\x83\xb6\x97\x4d\x27\x1d\x83\xb4\x5a\x33\xfa\x6e\xea\x9f\xfc\x3c\x79\xed\x33\x44\x8f\x61\xbc\xdd\x82\x37\xf2\x28\xdb\x3e\xce\x29\xdd\x8d\x4a\xd0\x6b\xa3\x9b\x70\x70\xfc\xfc\xdf\x3b\xe3\x39\xad\x56\x24\xd0\x5d\x11\x8a\x6e\x9a\xd3\x5f\x00\x00\x00\xff\xff\x93\x6f\x69\x98\xe1\x00\x00\x00")

func bindataSqlInsertuserSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlInsertuserSql,
		"sql/insert_user.sql",
	)
}



func bindataSqlInsertuserSql() (*asset, error) {
	bytes, err := bindataSqlInsertuserSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/insert_user.sql",
		size: 225,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677593170, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallmodelelementsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x4b\xcd\x49\xcd\x4d\xcd\x2b\x29\xb6\x06\x04\x00\x00\xff\xff\xcc\x0a\xd8\x06\x20\x00\x00\x00")

func bindataSqlSelectallmodelelementsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallmodelelementsSql,
		"sql/select_all_model_elements.sql",
	)
}



func bindataSqlSelectallmodelelementsSql() (*asset, error) {
	bytes, err := bindataSqlSelectallmodelelementsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_model_elements.sql",
		size: 32,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677232788, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallmodelsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\xcb\xcd\x4f\x49\xcd\x29\xb6\x06\x04\x00\x00\xff\xff\x8f\xcd\x47\xea\x1e\x00\x00\x00")

func bindataSqlSelectallmodelsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallmodelsSql,
		"sql/select_all_models.sql",
	)
}



func bindataSqlSelectallmodelsSql() (*asset, error) {
	bytes, err := bindataSqlSelectallmodelsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_models.sql",
		size: 30,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677232788, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallpropertiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x28\xca\x2f\x48\x2d\x2a\xc9\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x6a\x00\xd0\x6c\x21\x00\x00\x00")

func bindataSqlSelectallpropertiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallpropertiesSql,
		"sql/select_all_properties.sql",
	)
}



func bindataSqlSelectallpropertiesSql() (*asset, error) {
	bytes, err := bindataSqlSelectallpropertiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_properties.sql",
		size: 33,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677233396, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectcontextsbyidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xc8\x4c\xd1\x51\x28\x49\xad\x28\xe1\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\xce\xcf\x03\x89\x15\x73\x95\x67\xa4\x16\xa5\x2a\x64\xa6\x28\xd8\x2a\x24\xe6\x55\x6a\xa8\x18\x6a\x5a\x03\x02\x00\x00\xff\xff\x0e\x85\x7d\xa7\x38\x00\x00\x00")

func bindataSqlSelectcontextsbyidSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectcontextsbyidSql,
		"sql/select_contexts_by_id.sql",
	)
}



func bindataSqlSelectcontextsbyidSql() (*asset, error) {
	bytes, err := bindataSqlSelectcontextsbyidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_contexts_by_id.sql",
		size: 56,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677404641, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectcontextsidbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x48\xce\xcf\x2b\x49\xad\x28\x89\xcf\x4c\xe1\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x83\x4a\x14\xc7\x27\xe6\xa5\xc4\x97\xe6\x65\x96\x14\xc7\xab\x18\x71\x95\x67\xa4\x16\xa5\x2a\x80\xb8\xf1\x99\x29\x0a\xb6\x0a\x2a\xc6\xd6\x5c\x80\x00\x00\x00\xff\xff\x52\x59\xf6\xff\x4a\x00\x00\x00")

func bindataSqlSelectcontextsidbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectcontextsidbyunitSql,
		"sql/select_contexts_id_by_unit.sql",
	)
}



func bindataSqlSelectcontextsidbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectcontextsidbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_contexts_id_by_unit.sql",
		size: 74,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677401760, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectlayernamesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x4e\xce\x48\xcd\x4d\x8c\xcf\x4b\xcc\x4d\xe5\x4a\x2b\xca\xcf\x55\xc8\xcc\x4b\xcb\x2f\xca\x4d\x2c\xc9\xcc\xcf\x8b\x87\x48\xea\x41\xa8\x92\x44\xae\xf2\x8c\xd4\xa2\x54\x64\x2d\x0a\x39\x99\xd9\xa9\x0a\xea\xaa\xf1\x39\x89\x95\xa9\x45\xea\xd6\x5c\x80\x00\x00\x00\xff\xff\xde\x9c\x3c\xbe\x56\x00\x00\x00")

func bindataSqlSelectlayernamesSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectlayernamesSql,
		"sql/select_layer_names.sql",
	)
}



func bindataSqlSelectlayernamesSql() (*asset, error) {
	bytes, err := bindataSqlSelectlayernamesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_layer_names.sql",
		size: 86,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1676325398, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectlinkedunitsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8a\xc3\x30\x10\x43\xef\xf9\x0a\x1f\xf6\xb8\x04\xf6\xbc\xe4\x5b\x06\x53\xab\xc5\x25\x91\x61\x3c\x81\xf6\xef\x4b\x12\x0a\x0e\x4e\x9d\xfa\x36\x1e\x49\xf8\xc9\x19\x23\x2e\xe6\x7e\xfe\x64\xf4\x4f\x68\x3f\x33\x5a\x16\x9d\xfb\x18\x9c\xcf\x6e\x19\x45\x67\x89\xe1\xb7\x73\xdb\xa9\xa5\x53\x0a\x18\x65\x6f\x78\xdf\x35\x6c\x8a\x5b\xcc\xa6\xde\x62\xa2\x04\x6f\x28\xfd\xd5\xb2\x11\x64\x78\x58\xe9\x5d\xe6\x4f\x72\xb0\x24\x03\x1b\x4f\x04\x6b\x32\xf0\x94\x0c\x6c\x90\x81\xdf\x93\x81\x7b\x32\x70\x25\xeb\xae\x9a\xa6\x83\x1a\xd6\x94\x48\x42\xdd\x3d\x45\xd6\x02\xf1\x0c\x02\xba\x74\xb0\x5b\x4a\x19\x8a\xdf\x3e\x09\x3b\x4c\xd9\xaa\x1d\x8a\x66\xff\xbb\x57\x00\x00\x00\xff\xff\x6e\xb7\xe0\xb9\x5f\x02\x00\x00")

func bindataSqlSelectlinkedunitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectlinkedunitsSql,
		"sql/select_linked_units.sql",
	)
}



func bindataSqlSelectlinkedunitsSql() (*asset, error) {
	bytes, err := bindataSqlSelectlinkedunitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_linked_units.sql",
		size: 607,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677397991, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectpropertiesbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xc1\x6e\x83\x30\x10\x44\xef\xfe\x8a\x39\x70\x28\x95\xa8\x44\x7b\xac\xf8\x16\xcb\xd8\x1b\xb1\x92\x31\xc4\x5e\x2b\xe1\xef\x23\x02\x8a\x20\x44\xc9\x5c\x67\xe7\xbd\x4d\xe4\xc9\x0a\xbe\xd5\x29\x0e\x3d\xc6\xdc\x7a\xb6\x3f\x63\x1c\x46\x8a\xc2\x94\xd4\xa5\xa3\x48\x60\x07\x0e\xf8\x5a\x8f\xd7\x7a\xd2\xec\x14\xb6\xb9\x33\x8a\x5a\x7b\x33\x51\xdc\x50\xb4\x09\x4e\xe7\xc0\x92\x74\xf1\xbb\x9f\x2c\xfc\xb9\xd3\xec\xd0\x3c\x1c\xcf\xe8\x43\xf6\xae\xd7\xf0\x43\x16\x9b\xd0\x55\xd0\xa0\xf8\xfb\x70\xed\xb9\x67\x41\x8d\xaa\x42\x4b\xd6\xe4\xb4\x4e\x3b\x93\xe6\x8f\xcf\x99\x60\x87\x90\x24\x1a\x0e\xf2\x9e\x55\xee\xea\xf2\x5f\xdd\x02\x00\x00\xff\xff\x0b\x0d\x65\x70\x78\x01\x00\x00")

func bindataSqlSelectpropertiesbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectpropertiesbyunitSql,
		"sql/select_properties_by_unit.sql",
	)
}



func bindataSqlSelectpropertiesbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectpropertiesbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_properties_by_unit.sql",
		size: 376,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677234694, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectpropertiesidbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x28\xca\x2f\x48\x2d\x2a\xa9\x8c\xcf\x4c\xe1\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x83\xca\x64\xa6\x16\xc7\x27\xe6\xa5\xc4\x97\xe6\x65\x96\x14\xc7\xab\x18\x71\x95\x67\xa4\x16\xa5\x2a\x80\xb8\xf1\x99\x29\x0a\xb6\x0a\x2a\xc6\xd6\x5c\x80\x00\x00\x00\xff\xff\x29\x2c\x66\xa2\x4d\x00\x00\x00")

func bindataSqlSelectpropertiesidbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectpropertiesidbyunitSql,
		"sql/select_properties_id_by_unit.sql",
	)
}



func bindataSqlSelectpropertiesidbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectpropertiesidbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_properties_id_by_unit.sql",
		size: 77,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677401658, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectroleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x2d\x4e\x2d\x2a\xd6\x2b\xca\xcf\x49\xe5\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x03\x0b\x73\x95\x67\xa4\x16\xa5\x42\x95\xe4\x25\xe6\xa6\x2a\xd8\x2a\x68\x40\xf5\x15\xa7\x16\x17\x67\xe6\xe7\xc5\x83\x24\x35\xad\xb9\x00\x01\x00\x00\xff\xff\x53\x14\x8a\xa3\x4e\x00\x00\x00")

func bindataSqlSelectroleSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectroleSql,
		"sql/select_role.sql",
	)
}



func bindataSqlSelectroleSql() (*asset, error) {
	bytes, err := bindataSqlSelectroleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_role.sql",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677146985, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectunlinkedunitsbylangSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x2b\xcd\xcb\x2c\x29\x8e\x57\x31\xe2\x2a\xcf\x48\x2d\x4a\x55\xc8\x4c\x51\xc8\xcb\x2f\x51\xc8\xcc\x53\xd0\x80\xea\x00\x29\x88\x57\x31\x8a\xcf\x4c\xe1\x52\x40\x07\x60\xb3\xd0\x8c\x2a\x2a\x8d\x4f\xcc\x4b\x89\x4f\xcd\xc3\x50\xae\x69\xcd\x05\x08\x00\x00\xff\xff\xc0\x08\xc2\x45\x86\x00\x00\x00")

func bindataSqlSelectunlinkedunitsbylangSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectunlinkedunitsbylangSql,
		"sql/select_unlinked_units_by_lang.sql",
	)
}



func bindataSqlSelectunlinkedunitsbylangSql() (*asset, error) {
	bytes, err := bindataSqlSelectunlinkedunitsbylangSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_unlinked_units_by_lang.sql",
		size: 134,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677249617, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectuserpasswordSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x48\x2c\x2e\x2e\xcf\x2f\x4a\xe1\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x2d\x4e\x2d\x2a\xe6\x2a\xcf\x48\x2d\x4a\x55\xc8\x4b\xcc\x4d\x55\xb0\x55\x50\x31\xe4\xca\xc9\xcc\xcd\x2c\x51\x30\xb4\x06\x04\x00\x00\xff\xff\x6c\x44\x09\x8b\x3a\x00\x00\x00")

func bindataSqlSelectuserpasswordSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectuserpasswordSql,
		"sql/select_user_password.sql",
	)
}



func bindataSqlSelectuserpasswordSql() (*asset, error) {
	bytes, err := bindataSqlSelectuserpasswordSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_user_password.sql",
		size: 58,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677410171, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"sql/create_layer.sql":                  bindataSqlCreatelayerSql,
	"sql/insert_user.sql":                   bindataSqlInsertuserSql,
	"sql/select_all_model_elements.sql":     bindataSqlSelectallmodelelementsSql,
	"sql/select_all_models.sql":             bindataSqlSelectallmodelsSql,
	"sql/select_all_properties.sql":         bindataSqlSelectallpropertiesSql,
	"sql/select_contexts_by_id.sql":         bindataSqlSelectcontextsbyidSql,
	"sql/select_contexts_id_by_unit.sql":    bindataSqlSelectcontextsidbyunitSql,
	"sql/select_layer_names.sql":            bindataSqlSelectlayernamesSql,
	"sql/select_linked_units.sql":           bindataSqlSelectlinkedunitsSql,
	"sql/select_properties_by_unit.sql":     bindataSqlSelectpropertiesbyunitSql,
	"sql/select_properties_id_by_unit.sql":  bindataSqlSelectpropertiesidbyunitSql,
	"sql/select_role.sql":                   bindataSqlSelectroleSql,
	"sql/select_unlinked_units_by_lang.sql": bindataSqlSelectunlinkedunitsbylangSql,
	"sql/select_user_password.sql":          bindataSqlSelectuserpasswordSql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"sql": {Func: nil, Children: map[string]*bintree{
		"create_layer.sql": {Func: bindataSqlCreatelayerSql, Children: map[string]*bintree{}},
		"insert_user.sql": {Func: bindataSqlInsertuserSql, Children: map[string]*bintree{}},
		"select_all_model_elements.sql": {Func: bindataSqlSelectallmodelelementsSql, Children: map[string]*bintree{}},
		"select_all_models.sql": {Func: bindataSqlSelectallmodelsSql, Children: map[string]*bintree{}},
		"select_all_properties.sql": {Func: bindataSqlSelectallpropertiesSql, Children: map[string]*bintree{}},
		"select_contexts_by_id.sql": {Func: bindataSqlSelectcontextsbyidSql, Children: map[string]*bintree{}},
		"select_contexts_id_by_unit.sql": {Func: bindataSqlSelectcontextsidbyunitSql, Children: map[string]*bintree{}},
		"select_layer_names.sql": {Func: bindataSqlSelectlayernamesSql, Children: map[string]*bintree{}},
		"select_linked_units.sql": {Func: bindataSqlSelectlinkedunitsSql, Children: map[string]*bintree{}},
		"select_properties_by_unit.sql": {Func: bindataSqlSelectpropertiesbyunitSql, Children: map[string]*bintree{}},
		"select_properties_id_by_unit.sql": {Func: bindataSqlSelectpropertiesidbyunitSql, Children: map[string]*bintree{}},
		"select_role.sql": {Func: bindataSqlSelectroleSql, Children: map[string]*bintree{}},
		"select_unlinked_units_by_lang.sql": {Func: bindataSqlSelectunlinkedunitsbylangSql, Children: map[string]*bintree{}},
		"select_user_password.sql": {Func: bindataSqlSelectuserpasswordSql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
