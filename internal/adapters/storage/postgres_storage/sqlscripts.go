// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sql/insert_user.sql
// sql/select_all_model_elements.sql
// sql/select_all_models.sql
// sql/select_all_properties.sql
// sql/select_contexts_by_id.sql
// sql/select_contexts_id_by_unit.sql
// sql/select_layer_names.sql
// sql/select_linked_units.sql
// sql/select_properties_by_unit.sql
// sql/select_properties_id_by_unit.sql
// sql/select_role.sql
// sql/select_table_names_in_layer.sql
// sql/select_unlinked_units_by_lang.sql
// sql/select_user_password.sql

package postgres_storage


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSqlInsertuserSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x6a\x86\x30\x14\x85\xf7\x3c\xc5\x19\x32\x28\x24\x05\x75\xd3\xb1\xb8\x75\x6b\x5f\x20\xd5\x8b\x0d\xc4\x44\xee\xbd\x51\xfa\xf6\xa5\xb8\xfc\xe0\x7a\xbe\xf3\xc1\x17\xb3\x10\x2b\x62\xd6\x82\xa3\x7e\xa7\xb8\xbc\x55\x21\x16\x94\x93\x98\xe3\x1a\xf3\x86\xff\x01\x67\x48\x95\xe0\x3d\x0a\xbf\x32\xf9\x15\xa5\xfd\xa6\x46\x28\xd1\xa2\xc8\x35\x25\x07\xdb\x39\xd8\xde\xc1\x0e\x0e\xb9\x5c\x4d\x3b\x8e\x1a\x77\x12\x0d\xfb\x31\x19\xef\x6f\x47\xd0\x3c\xef\xcd\xe7\xfc\x31\xbf\x7f\x3d\xb4\xb6\x35\x66\x61\x0a\x4a\x77\x93\xed\x70\x45\xfd\xc1\x11\x44\xae\xc2\x2b\x6c\x3f\x99\x8d\x43\x56\xd8\x01\x5a\x60\xbb\xc9\xfc\x05\x00\x00\xff\xff\x01\xd7\x91\x4f\xe2\x00\x00\x00")

func bindataSqlInsertuserSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlInsertuserSql,
		"sql/insert_user.sql",
	)
}



func bindataSqlInsertuserSql() (*asset, error) {
	bytes, err := bindataSqlInsertuserSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/insert_user.sql",
		size: 226,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677410329, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallmodelelementsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x4b\xcd\x49\xcd\x4d\xcd\x2b\x29\xb6\x06\x04\x00\x00\xff\xff\xcc\x0a\xd8\x06\x20\x00\x00\x00")

func bindataSqlSelectallmodelelementsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallmodelelementsSql,
		"sql/select_all_model_elements.sql",
	)
}



func bindataSqlSelectallmodelelementsSql() (*asset, error) {
	bytes, err := bindataSqlSelectallmodelelementsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_model_elements.sql",
		size: 32,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677232788, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallmodelsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\xcb\xcd\x4f\x49\xcd\x29\xb6\x06\x04\x00\x00\xff\xff\x8f\xcd\x47\xea\x1e\x00\x00\x00")

func bindataSqlSelectallmodelsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallmodelsSql,
		"sql/select_all_models.sql",
	)
}



func bindataSqlSelectallmodelsSql() (*asset, error) {
	bytes, err := bindataSqlSelectallmodelsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_models.sql",
		size: 30,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677232788, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectallpropertiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x28\xca\x2f\x48\x2d\x2a\xc9\x4c\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x6a\x00\xd0\x6c\x21\x00\x00\x00")

func bindataSqlSelectallpropertiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectallpropertiesSql,
		"sql/select_all_properties.sql",
	)
}



func bindataSqlSelectallpropertiesSql() (*asset, error) {
	bytes, err := bindataSqlSelectallpropertiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_all_properties.sql",
		size: 33,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677233396, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectcontextsbyidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xc8\x4c\xd1\x51\x28\x49\xad\x28\xe1\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\xce\xcf\x03\x89\x15\x73\x95\x67\xa4\x16\xa5\x2a\x64\xa6\x28\xd8\x2a\x24\xe6\x55\x6a\xa8\x18\x6a\x5a\x03\x02\x00\x00\xff\xff\x0e\x85\x7d\xa7\x38\x00\x00\x00")

func bindataSqlSelectcontextsbyidSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectcontextsbyidSql,
		"sql/select_contexts_by_id.sql",
	)
}



func bindataSqlSelectcontextsbyidSql() (*asset, error) {
	bytes, err := bindataSqlSelectcontextsbyidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_contexts_by_id.sql",
		size: 56,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677404641, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectcontextsidbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x48\xce\xcf\x2b\x49\xad\x28\x89\xcf\x4c\xe1\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x83\x4a\x14\xc7\x27\xe6\xa5\xc4\x97\xe6\x65\x96\x14\xc7\xab\x18\x71\x95\x67\xa4\x16\xa5\x2a\x80\xb8\xf1\x99\x29\x0a\xb6\x0a\x2a\xc6\xd6\x5c\x80\x00\x00\x00\xff\xff\x52\x59\xf6\xff\x4a\x00\x00\x00")

func bindataSqlSelectcontextsidbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectcontextsidbyunitSql,
		"sql/select_contexts_id_by_unit.sql",
	)
}



func bindataSqlSelectcontextsidbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectcontextsidbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_contexts_id_by_unit.sql",
		size: 74,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677401760, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectlayernamesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x4e\xce\x48\xcd\x4d\x8c\xcf\x4b\xcc\x4d\xe5\x4a\x2b\xca\xcf\x55\xc8\xcc\x4b\xcb\x2f\xca\x4d\x2c\xc9\xcc\xcf\x8b\x87\x48\xea\x41\xa8\x92\x44\xae\xf2\x8c\xd4\xa2\x54\x64\x2d\x0a\x39\x99\xd9\xa9\x0a\xea\xaa\xf1\x39\x89\x95\xa9\x45\xea\xd6\x5c\x80\x00\x00\x00\xff\xff\xde\x9c\x3c\xbe\x56\x00\x00\x00")

func bindataSqlSelectlayernamesSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectlayernamesSql,
		"sql/select_layer_names.sql",
	)
}



func bindataSqlSelectlayernamesSql() (*asset, error) {
	bytes, err := bindataSqlSelectlayernamesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_layer_names.sql",
		size: 86,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1676325398, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectlinkedunitsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8a\xc3\x30\x10\x43\xef\xf9\x0a\x1f\xf6\xb8\x04\xf6\xbc\xe4\x5b\x06\x53\xab\xc5\x25\x91\x61\x3c\x81\xf6\xef\x4b\x12\x0a\x0e\x4e\x9d\xfa\x36\x1e\x49\xf8\xc9\x19\x23\x2e\xe6\x7e\xfe\x64\xf4\x4f\x68\x3f\x33\x5a\x16\x9d\xfb\x18\x9c\xcf\x6e\x19\x45\x67\x89\xe1\xb7\x73\xdb\xa9\xa5\x53\x0a\x18\x65\x6f\x78\xdf\x35\x6c\x8a\x5b\xcc\xa6\xde\x62\xa2\x04\x6f\x28\xfd\xd5\xb2\x11\x64\x78\x58\xe9\x5d\xe6\x4f\x72\xb0\x24\x03\x1b\x4f\x04\x6b\x32\xf0\x94\x0c\x6c\x90\x81\xdf\x93\x81\x7b\x32\x70\x25\xeb\xae\x9a\xa6\x83\x1a\xd6\x94\x48\x42\xdd\x3d\x45\xd6\x02\xf1\x0c\x02\xba\x74\xb0\x5b\x4a\x19\x8a\xdf\x3e\x09\x3b\x4c\xd9\xaa\x1d\x8a\x66\xff\xbb\x57\x00\x00\x00\xff\xff\x6e\xb7\xe0\xb9\x5f\x02\x00\x00")

func bindataSqlSelectlinkedunitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectlinkedunitsSql,
		"sql/select_linked_units.sql",
	)
}



func bindataSqlSelectlinkedunitsSql() (*asset, error) {
	bytes, err := bindataSqlSelectlinkedunitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_linked_units.sql",
		size: 607,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677397991, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectpropertiesbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xc1\x6e\x83\x30\x10\x44\xef\xfe\x8a\x39\x70\x28\x95\xa8\x44\x7b\xac\xf8\x16\xcb\xd8\x1b\xb1\x92\x31\xc4\x5e\x2b\xe1\xef\x23\x02\x8a\x20\x44\xc9\x5c\x67\xe7\xbd\x4d\xe4\xc9\x0a\xbe\xd5\x29\x0e\x3d\xc6\xdc\x7a\xb6\x3f\x63\x1c\x46\x8a\xc2\x94\xd4\xa5\xa3\x48\x60\x07\x0e\xf8\x5a\x8f\xd7\x7a\xd2\xec\x14\xb6\xb9\x33\x8a\x5a\x7b\x33\x51\xdc\x50\xb4\x09\x4e\xe7\xc0\x92\x74\xf1\xbb\x9f\x2c\xfc\xb9\xd3\xec\xd0\x3c\x1c\xcf\xe8\x43\xf6\xae\xd7\xf0\x43\x16\x9b\xd0\x55\xd0\xa0\xf8\xfb\x70\xed\xb9\x67\x41\x8d\xaa\x42\x4b\xd6\xe4\xb4\x4e\x3b\x93\xe6\x8f\xcf\x99\x60\x87\x90\x24\x1a\x0e\xf2\x9e\x55\xee\xea\xf2\x5f\xdd\x02\x00\x00\xff\xff\x0b\x0d\x65\x70\x78\x01\x00\x00")

func bindataSqlSelectpropertiesbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectpropertiesbyunitSql,
		"sql/select_properties_by_unit.sql",
	)
}



func bindataSqlSelectpropertiesbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectpropertiesbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_properties_by_unit.sql",
		size: 376,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677234694, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectpropertiesidbyunitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x28\xca\x2f\x48\x2d\x2a\xa9\x8c\xcf\x4c\xe1\x4a\x2b\xca\xcf\x55\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x83\xca\x64\xa6\x16\xc7\x27\xe6\xa5\xc4\x97\xe6\x65\x96\x14\xc7\xab\x18\x71\x95\x67\xa4\x16\xa5\x2a\x80\xb8\xf1\x99\x29\x0a\xb6\x0a\x2a\xc6\xd6\x5c\x80\x00\x00\x00\xff\xff\x29\x2c\x66\xa2\x4d\x00\x00\x00")

func bindataSqlSelectpropertiesidbyunitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectpropertiesidbyunitSql,
		"sql/select_properties_id_by_unit.sql",
	)
}



func bindataSqlSelectpropertiesidbyunitSql() (*asset, error) {
	bytes, err := bindataSqlSelectpropertiesidbyunitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_properties_id_by_unit.sql",
		size: 77,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677401658, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectroleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x2d\x4e\x2d\x2a\xd6\x2b\xca\xcf\x49\xe5\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x03\x0b\x73\x95\x67\xa4\x16\xa5\x42\x95\xe4\x25\xe6\xa6\x2a\xd8\x2a\x68\x40\xf5\x15\xa7\x16\x17\x67\xe6\xe7\xc5\x83\x24\x35\xad\xb9\x00\x01\x00\x00\xff\xff\x53\x14\x8a\xa3\x4e\x00\x00\x00")

func bindataSqlSelectroleSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectroleSql,
		"sql/select_role.sql",
	)
}



func bindataSqlSelectroleSql() (*asset, error) {
	bytes, err := bindataSqlSelectroleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_role.sql",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677146985, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelecttablenamesinlayerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\x31\x0a\xc3\x30\x0c\x85\xe1\xdd\xa7\xd0\xe6\x29\xb9\x40\xe9\x59\x8c\x1a\x9e\x49\x40\xb2\x41\x52\x29\x05\x1d\xbe\xd0\x74\xe9\x96\xf5\xe7\x7b\xcf\x21\xd8\x82\x82\x1f\x82\xe6\xdb\x0e\xe5\xcc\xba\xd6\xcc\x33\x0d\x56\x10\x3b\xf5\xa7\x48\x33\xc8\x19\x96\x85\xae\x0c\x4b\xb7\xa9\x74\x8c\x3e\x4d\x39\x8e\x39\x7e\x70\xfd\x12\x2f\xaf\x1d\x86\xbf\x0b\xba\x53\x0d\x98\x7a\x13\x7e\xc3\xea\xad\x7c\x02\x00\x00\xff\xff\x85\x71\x5e\x94\xa1\x00\x00\x00")

func bindataSqlSelecttablenamesinlayerSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelecttablenamesinlayerSql,
		"sql/select_table_names_in_layer.sql",
	)
}



func bindataSqlSelecttablenamesinlayerSql() (*asset, error) {
	bytes, err := bindataSqlSelecttablenamesinlayerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_table_names_in_layer.sql",
		size: 161,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1676325656, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectunlinkedunitsbylangSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\xe2\x4a\x2b\xca\xcf\x55\x50\x50\x31\x8c\xcf\x49\xac\x4c\x2d\xd2\x2b\xcd\xcb\x2c\x29\x8e\x57\x31\xe2\x2a\xcf\x48\x2d\x4a\x55\xc8\x4c\x51\xc8\xcb\x2f\x51\xc8\xcc\x53\xd0\x80\xea\x00\x29\x88\x57\x31\x8a\xcf\x4c\xe1\x52\x40\x07\x60\xb3\xd0\x8c\x2a\x2a\x8d\x4f\xcc\x4b\x89\x4f\xcd\xc3\x50\xae\x69\xcd\x05\x08\x00\x00\xff\xff\xc0\x08\xc2\x45\x86\x00\x00\x00")

func bindataSqlSelectunlinkedunitsbylangSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectunlinkedunitsbylangSql,
		"sql/select_unlinked_units_by_lang.sql",
	)
}



func bindataSqlSelectunlinkedunitsbylangSql() (*asset, error) {
	bytes, err := bindataSqlSelectunlinkedunitsbylangSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_unlinked_units_by_lang.sql",
		size: 134,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677249617, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlSelectuserpasswordSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x28\x48\x2c\x2e\x2e\xcf\x2f\x4a\xe1\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x2d\x4e\x2d\x2a\xe6\x2a\xcf\x48\x2d\x4a\x55\xc8\x4b\xcc\x4d\x55\xb0\x55\x50\x31\xe4\xca\xc9\xcc\xcd\x2c\x51\x30\xb4\x06\x04\x00\x00\xff\xff\x6c\x44\x09\x8b\x3a\x00\x00\x00")

func bindataSqlSelectuserpasswordSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlSelectuserpasswordSql,
		"sql/select_user_password.sql",
	)
}



func bindataSqlSelectuserpasswordSql() (*asset, error) {
	bytes, err := bindataSqlSelectuserpasswordSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/select_user_password.sql",
		size: 58,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1677410171, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"sql/insert_user.sql":                   bindataSqlInsertuserSql,
	"sql/select_all_model_elements.sql":     bindataSqlSelectallmodelelementsSql,
	"sql/select_all_models.sql":             bindataSqlSelectallmodelsSql,
	"sql/select_all_properties.sql":         bindataSqlSelectallpropertiesSql,
	"sql/select_contexts_by_id.sql":         bindataSqlSelectcontextsbyidSql,
	"sql/select_contexts_id_by_unit.sql":    bindataSqlSelectcontextsidbyunitSql,
	"sql/select_layer_names.sql":            bindataSqlSelectlayernamesSql,
	"sql/select_linked_units.sql":           bindataSqlSelectlinkedunitsSql,
	"sql/select_properties_by_unit.sql":     bindataSqlSelectpropertiesbyunitSql,
	"sql/select_properties_id_by_unit.sql":  bindataSqlSelectpropertiesidbyunitSql,
	"sql/select_role.sql":                   bindataSqlSelectroleSql,
	"sql/select_table_names_in_layer.sql":   bindataSqlSelecttablenamesinlayerSql,
	"sql/select_unlinked_units_by_lang.sql": bindataSqlSelectunlinkedunitsbylangSql,
	"sql/select_user_password.sql":          bindataSqlSelectuserpasswordSql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"sql": {Func: nil, Children: map[string]*bintree{
		"insert_user.sql": {Func: bindataSqlInsertuserSql, Children: map[string]*bintree{}},
		"select_all_model_elements.sql": {Func: bindataSqlSelectallmodelelementsSql, Children: map[string]*bintree{}},
		"select_all_models.sql": {Func: bindataSqlSelectallmodelsSql, Children: map[string]*bintree{}},
		"select_all_properties.sql": {Func: bindataSqlSelectallpropertiesSql, Children: map[string]*bintree{}},
		"select_contexts_by_id.sql": {Func: bindataSqlSelectcontextsbyidSql, Children: map[string]*bintree{}},
		"select_contexts_id_by_unit.sql": {Func: bindataSqlSelectcontextsidbyunitSql, Children: map[string]*bintree{}},
		"select_layer_names.sql": {Func: bindataSqlSelectlayernamesSql, Children: map[string]*bintree{}},
		"select_linked_units.sql": {Func: bindataSqlSelectlinkedunitsSql, Children: map[string]*bintree{}},
		"select_properties_by_unit.sql": {Func: bindataSqlSelectpropertiesbyunitSql, Children: map[string]*bintree{}},
		"select_properties_id_by_unit.sql": {Func: bindataSqlSelectpropertiesidbyunitSql, Children: map[string]*bintree{}},
		"select_role.sql": {Func: bindataSqlSelectroleSql, Children: map[string]*bintree{}},
		"select_table_names_in_layer.sql": {Func: bindataSqlSelecttablenamesinlayerSql, Children: map[string]*bintree{}},
		"select_unlinked_units_by_lang.sql": {Func: bindataSqlSelectunlinkedunitsbylangSql, Children: map[string]*bintree{}},
		"select_user_password.sql": {Func: bindataSqlSelectuserpasswordSql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
