version: '3.8'

volumes:
  postgres:

services:
    postgres:
        container_name: postgres_main
        image: postgres:15.2-alpine3.17
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: postgres
            PGDATA: /data/postgres
        volumes:
            - postgres:/var/lib/postgresql/data
        ports:
            - 5432:5432
        networks:
            - persistent_bridge_network
    influxdb: # TODO: configure dashboards
        image: influxdb:2.6.1-alpine
        environment:
            DOCKER_INFLUXDB_INIT_MODE: setup
            DOCKER_INFLUXDB_INIT_USERNAME: root     # ${INFLUXDB_USERNAME}
            DOCKER_INFLUXDB_INIT_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81   # ${INFLUXDB_PASSWORD}
            DOCKER_INFLUXDB_INIT_ORG: iot
            DOCKER_INFLUXDB_INIT_BUCKET: users_business_events
            DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
        ports:
            - "8086:8086"
    redis:
        image: redis:7.0.8-alpine3.17
        environment:
            REDIS_HOST: redis ########################################### TO APP
            REDIS_PORT: 6379 ############################################ TO APP
            REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81 ############ TO APP
        restart: always
        ports:
            - '6379:6379'
        command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        volumes:
            - redis:/data
        depends_on:
            - postgres
volumes:
    redis:
        driver: local
    postgres:
        driver: local
networks:
    persistent_bridge_network:
        driver: bridge

#   # configuration manager for NiFi
#   zookeeper:
#       hostname: myzookeeper
#       container_name: zookeeper_container_persistent
#       image: 'bitnami/zookeeper:3.7.0'
#       restart: on-failure
#       environment:
#           - ALLOW_ANONYMOUS_LOGIN=yes
#       networks:
#           - persistent_bridge_network
#
#   # version control for nifi flows
#   registry:
#       hostname: myregistry
#       container_name: registry_container_persistent
#       image: 'apache/nifi-registry:1.15.0'
#       restart: on-failure
#       ports:
#           - "18080:18080"
#       environment:
#           - LOG_LEVEL=INFO
#           - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
#           - NIFI_REGISTRY_FLOW_PROVIDER=file
#           - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
#       volumes:
#           - ./nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
#           - ./nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
#       networks:
#           - persistent_bridge_network
#
#   # data extraction, transformation and load service
#   nifi:
#       hostname: mynifi
#       container_name: nifi_container_persistent
#       image: 'apache/nifi:1.14.0'
#       restart: on-failure
#       ports:
#           - '8091:8080'
#       environment:
#           - NIFI_WEB_HTTP_PORT=8080
#           - NIFI_CLUSTER_IS_NODE=true
#           - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
#           - NIFI_ZK_CONNECT_STRING=myzookeeper:2181
#           - NIFI_ELECTION_MAX_WAIT=30 sec
#           - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
#       healthcheck:
#           test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8091/nifi/}"
#           interval: "60s"
#           timeout: "3s"
#           start_period: "5s"
#           retries: 5
#       volumes:
#           - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
#           - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
#           - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
#           - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
#           - ./nifi/state:/opt/nifi/nifi-current/state
#           - ./nifi/logs:/opt/nifi/nifi-current/logs
#           - ./nifi/jks:/opt/nifi/nifi-current/jks
#           - ./nifi/in_file:/opt/nifi/nifi-current/in_file
#       networks:
#           - persistent_bridge_network
#
#   # bi grafana
#   grafana:
#       image: grafana/grafana:latest
#       container_name: grafana_container
#       restart: always
#       ports:
#         - "3000:3000"
#       environment:
#         GF_SECURITY_ADMIN_USER: admin
#         GF_SECURITY_ADMIN_PASSWORD: password
#         GF_SERVER_ROOT_URL: http://localhost:3000/grafana/
#         GF_SERVER_SERVE_FROM_SUB_PATH: "true"
#       volumes:
#         - postgres:/var/lib/grafana:rw
#       depends_on:
#         - postgres
#       networks:
#         - persistent_bridge_network
